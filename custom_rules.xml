<?xml version="1.0" encoding="UTF-8"?>
<project name="TinyRPG-custom-build-rules">

    <property name="TALK" value="false"/>
    <property name="DEBUG" value="on"/>

    <property name="businesslogic.root" value="AndroidFree"/>
    <property name="android.businesslogic.lib" value="libs/tinyrpg.businesslogic.jar"/>
    <property name="android.libs" value="/libs"/>
    <property name="android.libs.test" value="libs/test"/>
    <property name="android.src.test" value="src/test/java"/>
    <property name="android.test.output" value="bin/test/classes"/>
    <property name="android.main.output" value="${out.dir}/classes"/>
    <!-- Must use junit 4.10 because 4.11 does not work with robolectric -->
    <property name="classpath.junit" value="${android.libs.test}/junit-4.10.jar"/>
    <!--<property name="classpath.junit" value="${android.libs.test}/junit-4.11.jar"/>-->
    <property name="classpath.robolectric" value="${android.libs.test}/robolectric-1.2-20121214.235454-193-jar-with-dependencies.jar"/>
    <!-- Property from the android tools build file for path to android java lib: -->
    <property name="android.project.classpath" value="project.target.class.path"/>

    <import file="AndroidFree/build_rules.xml" />

    <path id="classpath.android.base">
        <pathelement path="${java.class.path}"/>
        <pathelement path="${android.main.output}"/>
    </path>
    <path id="classpath.android.test">
        <!-- Hamcrest before JUnit to make sure we override JUnits hamcrest matchers -->
        <pathelement location="${android.libs.test}/jmock-2.6.0-RC2/hamcrest-core-1.3.0RC1.jar"/>
        <pathelement location="${android.libs.test}/jmock-2.6.0-RC2/hamcrest-library-1.3.0RC1.jar"/>
        <pathelement path="${classpath.junit}"/>
        <pathelement path="${android.test.output}"/>
        <pathelement path="${classpath.robolectric}"/>
        <pathelement path="${android.businesslogic.lib}"/>
        <pathelement path="${businesslogic.test.output}"/>
        <path refid="classpath.android.base"/>
        <path refid="${android.project.classpath}"/>
        <pathelement location="${android.libs.test}/jmock-2.6.0-RC2/jmock-2.6.0-RC2.jar"/>
        <pathelement location="${android.libs.test}/jmock-2.6.0-RC2/jmock-junit4-2.6.0-RC2.jar"/>
        <!-- For mocking abstract and concrete classes the following 3 libs are needed -->
        <pathelement location="${android.libs.test}/jmock-2.6.0-RC2/jmock-legacy-2.6.0-RC2.jar"/>
        <pathelement location="${android.libs.test}/jmock-2.6.0-RC2/cglib-nodep-2.2.jar"/>
        <pathelement location="${android.libs.test}/jmock-2.6.0-RC2/objenesis-1.0.jar"/>
        <!-- Google APIs maps.jar included to satisfy robolectrics Shadow bindings -->
        <path location="${env.ANDROID_HOME}/add-ons/addon-google_apis-google-17/libs/maps.jar"/>
    </path>

    <target name="-pre-build" depends="all-businesslogic">
        <jar basedir="${businesslogic.main.output}"
             destfile="${android.businesslogic.lib}"/>
    </target>

    <target name="-pre-clean" depends="clean-businesslogic,clean-compile-android-tests"/>
    <target name="-post-build" depends="android-unittest"/>

    <target name="compile-android-tests" description="Compile the android specific unit tests">
        <mkdir dir="${android.test.output}"/>
        <javac srcdir="${android.src.test}"
               destdir="${android.test.output}"
               verbose="${TALK}"
               debug="${DEBUG}"
               bootclasspathref="${android.project.classpath}"
               includeantruntime="false">
            <classpath refid="classpath.android.test"/>
        </javac>
    </target>

    <target name="clean-compile-android-tests" description="Clean the compiled android unit tests">
        <delete verbose="${TALK}">
            <fileset dir="${android.test.output}">
                <include name="**/*.class"/>
            </fileset>
        </delete>
    </target>

    <target name="android-unittest" description="Execute the android specific unit tests" depends="compile-android-tests">
        <junit printsummary="yes" haltonfailure="no" showoutput="yes" failureproperty="test.failure" fork="true">
            <formatter type="plain" usefile="false"/>
            <!--<bootclasspath refid="${android.project.classpath}"/>-->
            <classpath refid="classpath.android.test"/>
            <batchtest fork="yes">
                <fileset dir="${android.src.test}">
                    <include name="**/*.java"/>
                </fileset>
            </batchtest>
        </junit>
        <fail if="test.failure"/>
    </target>

</project>
